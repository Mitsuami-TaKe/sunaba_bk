

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO 'public'
    AS $$
BEGIN
  INSERT INTO public.users (id, email)
  VALUES (NEW.id, NEW.email);
  RETURN NEW;
END;
$$;


ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."increment_or_decrement_serious_order_by_contents_update"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
    -- 行が更新されたときの処理
    IF TG_OP = 'UPDATE' THEN
        -- 同一のシリーズ内の更新
        IF NEW.serious_id = OLD.serious_id AND NEW.serious_order <> OLD.serious_order THEN
            -- serious_orderを更新する処理をここに追加（必要に応じて）

        ELSE
            -- serious_idがNULLでない場合にのみ処理を行う
            IF NEW.serious_id IS NOT NULL THEN
                -- 追加された行のserious_order以上のorderを1つ繰り上げる
                UPDATE content_master
                SET serious_order = serious_order + 1
                WHERE serious_id = NEW.serious_id
                AND serious_order >= NEW.serious_order;
            ELSIF NEW.serious_order IS NOT NULL THEN
                -- シリーズIDがNULLなのに連番が割り振られている場合
                NEW.serious_order := NULL;  -- serious_order を NULL に設定
            END IF;

            -- 古いserious_idがNULLでない場合にのみ処理を行う
            IF OLD.serious_id IS NOT NULL THEN
                -- 削除された行のserious_orderより後のorderを1つ繰り上げる
                UPDATE content_master
                SET serious_order = serious_order - 1
                WHERE serious_id = OLD.serious_id
                AND serious_order > OLD.serious_order;
            END IF;
        END IF;
    END IF;

    RETURN NEW;
END;
$$;


ALTER FUNCTION "public"."increment_or_decrement_serious_order_by_contents_update"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."increment_or_decriment_serious_order_by_contents_insert_or_dele"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
    -- INSERT操作の処理
    IF TG_OP = 'INSERT' THEN
        -- serious_idがNULLでない場合にのみ処理を行う
        IF NEW.serious_id IS NOT NULL THEN
            -- 追加された行のserious_order以上のorderを1つ繰り上げる
            UPDATE content_master
            SET serious_order = serious_order + 1
            WHERE serious_id = NEW.serious_id
            AND serious_order >= NEW.serious_order; -- ここを修正
        END IF;

    -- DELETE操作の処理
    ELSIF TG_OP = 'DELETE' THEN
        -- serious_idがNULLでない場合にのみ処理を行う
        IF OLD.serious_id IS NOT NULL THEN
            -- 削除された行のserious_orderより後のorderを1つ繰り上げる
            UPDATE content_master
            SET serious_order = serious_order - 1
            WHERE serious_id = OLD.serious_id
            AND serious_order > OLD.serious_order;
        END IF;
    END IF;

    RETURN NEW;
END;
$$;


ALTER FUNCTION "public"."increment_or_decriment_serious_order_by_contents_insert_or_dele"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."content_draft_master" (
    "id" bigint NOT NULL,
    "user_id" "uuid" NOT NULL,
    "title" "text" DEFAULT ''::"text" NOT NULL,
    "body" "text" DEFAULT ''::"text" NOT NULL,
    "last_update" timestamp with time zone DEFAULT "now"() NOT NULL,
    "original_content_id" bigint
);


ALTER TABLE "public"."content_draft_master" OWNER TO "postgres";


COMMENT ON TABLE "public"."content_draft_master" IS '下書きコンテンツのマスタデータ';



COMMENT ON COLUMN "public"."content_draft_master"."original_content_id" IS '既存コンテンツを編集、下書き保存したときの元コンテンツID';



ALTER TABLE "public"."content_draft_master" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."content_draft_master_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."content_master" (
    "id" bigint NOT NULL,
    "lastupdate" timestamp with time zone DEFAULT "now"() NOT NULL,
    "title" "text" DEFAULT ''::"text" NOT NULL,
    "body" "text" DEFAULT ''::"text" NOT NULL,
    "user_id" "uuid",
    "serious_id" bigint,
    "private_reason" "text" DEFAULT ''::"text" NOT NULL,
    "status" smallint DEFAULT '0'::smallint NOT NULL,
    "series_order" integer
);


ALTER TABLE "public"."content_master" OWNER TO "postgres";


COMMENT ON TABLE "public"."content_master" IS 'コンテンツ情報のマスターデータ';



ALTER TABLE "public"."content_master" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."content_master_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."series_master" (
    "id" bigint NOT NULL,
    "series_name" "text" DEFAULT ''::"text" NOT NULL,
    "series_description" "text" DEFAULT ''::"text" NOT NULL
);


ALTER TABLE "public"."series_master" OWNER TO "postgres";


ALTER TABLE "public"."series_master" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."series_master_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."tag_content" (
    "id" bigint NOT NULL,
    "content_id" bigint NOT NULL,
    "tag_id" bigint NOT NULL
);


ALTER TABLE "public"."tag_content" OWNER TO "postgres";


COMMENT ON TABLE "public"."tag_content" IS 'タグとコンテンツの中間テーブル';



CREATE TABLE IF NOT EXISTS "public"."tag_content_draft" (
    "id" bigint NOT NULL,
    "tag_id" bigint NOT NULL,
    "content_draft_id" bigint NOT NULL
);


ALTER TABLE "public"."tag_content_draft" OWNER TO "postgres";


ALTER TABLE "public"."tag_content_draft" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."tag_content_draft_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE "public"."tag_content" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."tag_content_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."tag_master" (
    "id" bigint NOT NULL,
    "tag_name" "text" DEFAULT ''::"text" NOT NULL
);


ALTER TABLE "public"."tag_master" OWNER TO "postgres";


COMMENT ON TABLE "public"."tag_master" IS 'タグのマスタデータ';



ALTER TABLE "public"."tag_master" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."tag_master_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."users_info_master" (
    "id" "uuid" NOT NULL,
    "first_name" "text",
    "last_name" "text"
);


ALTER TABLE "public"."users_info_master" OWNER TO "postgres";


ALTER TABLE ONLY "public"."content_draft_master"
    ADD CONSTRAINT "content_draft_master_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."content_master"
    ADD CONSTRAINT "content_master_id_key" UNIQUE ("id");



ALTER TABLE ONLY "public"."content_master"
    ADD CONSTRAINT "content_master_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."tag_content"
    ADD CONSTRAINT "contents_tags_id_key" UNIQUE ("id");



ALTER TABLE ONLY "public"."tag_content"
    ADD CONSTRAINT "contents_tags_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."series_master"
    ADD CONSTRAINT "serious_master_id_key" UNIQUE ("id");



ALTER TABLE ONLY "public"."series_master"
    ADD CONSTRAINT "serious_master_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."tag_content_draft"
    ADD CONSTRAINT "tag_content_draft_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."tag_master"
    ADD CONSTRAINT "tag_master_id_key" UNIQUE ("id");



ALTER TABLE ONLY "public"."tag_master"
    ADD CONSTRAINT "tag_master_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."tag_master"
    ADD CONSTRAINT "tag_master_tag_name_key" UNIQUE ("tag_name");



ALTER TABLE ONLY "public"."users_info_master"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."content_draft_master"
    ADD CONSTRAINT "content_draft_master_original_content_id_fkey" FOREIGN KEY ("original_content_id") REFERENCES "public"."content_master"("id");



ALTER TABLE ONLY "public"."content_draft_master"
    ADD CONSTRAINT "content_draft_master_original_content_id_fkey1" FOREIGN KEY ("original_content_id") REFERENCES "public"."content_master"("id") ON UPDATE CASCADE ON DELETE SET NULL;



ALTER TABLE ONLY "public"."content_draft_master"
    ADD CONSTRAINT "content_draft_master_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."content_draft_master"
    ADD CONSTRAINT "content_draft_master_user_id_fkey1" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."content_master"
    ADD CONSTRAINT "content_master_serious_id_fkey" FOREIGN KEY ("serious_id") REFERENCES "public"."series_master"("id") ON UPDATE CASCADE ON DELETE SET NULL;



ALTER TABLE ONLY "public"."content_master"
    ADD CONSTRAINT "content_master_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE SET NULL;



ALTER TABLE ONLY "public"."tag_content"
    ADD CONSTRAINT "contents_tags_content_id_fkey" FOREIGN KEY ("content_id") REFERENCES "public"."content_master"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."tag_content"
    ADD CONSTRAINT "contents_tags_tag_id_fkey" FOREIGN KEY ("tag_id") REFERENCES "public"."tag_master"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."tag_content_draft"
    ADD CONSTRAINT "tag_content_draft_content_draft_id_fkey" FOREIGN KEY ("content_draft_id") REFERENCES "public"."content_draft_master"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."tag_content_draft"
    ADD CONSTRAINT "tag_content_draft_tag_id_fkey" FOREIGN KEY ("tag_id") REFERENCES "public"."tag_master"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."users_info_master"
    ADD CONSTRAINT "users_info_master_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE SET NULL;



CREATE POLICY "Allow select for all authenticated users." ON "public"."users_info_master" FOR SELECT USING (("auth"."role"() = 'authenticated'::"text"));



CREATE POLICY "Allow update for users themselves." ON "public"."users_info_master" FOR UPDATE USING (("auth"."uid"() = "id"));



ALTER TABLE "public"."content_draft_master" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."content_master" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."series_master" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."tag_content" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."tag_content_draft" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."tag_master" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."users_info_master" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";
































































































































































































GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";



GRANT ALL ON FUNCTION "public"."increment_or_decrement_serious_order_by_contents_update"() TO "anon";
GRANT ALL ON FUNCTION "public"."increment_or_decrement_serious_order_by_contents_update"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."increment_or_decrement_serious_order_by_contents_update"() TO "service_role";



GRANT ALL ON FUNCTION "public"."increment_or_decriment_serious_order_by_contents_insert_or_dele"() TO "anon";
GRANT ALL ON FUNCTION "public"."increment_or_decriment_serious_order_by_contents_insert_or_dele"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."increment_or_decriment_serious_order_by_contents_insert_or_dele"() TO "service_role";





















GRANT ALL ON TABLE "public"."content_draft_master" TO "anon";
GRANT ALL ON TABLE "public"."content_draft_master" TO "authenticated";
GRANT ALL ON TABLE "public"."content_draft_master" TO "service_role";



GRANT ALL ON SEQUENCE "public"."content_draft_master_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."content_draft_master_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."content_draft_master_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."content_master" TO "anon";
GRANT ALL ON TABLE "public"."content_master" TO "authenticated";
GRANT ALL ON TABLE "public"."content_master" TO "service_role";



GRANT ALL ON SEQUENCE "public"."content_master_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."content_master_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."content_master_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."series_master" TO "anon";
GRANT ALL ON TABLE "public"."series_master" TO "authenticated";
GRANT ALL ON TABLE "public"."series_master" TO "service_role";



GRANT ALL ON SEQUENCE "public"."series_master_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."series_master_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."series_master_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."tag_content" TO "anon";
GRANT ALL ON TABLE "public"."tag_content" TO "authenticated";
GRANT ALL ON TABLE "public"."tag_content" TO "service_role";



GRANT ALL ON TABLE "public"."tag_content_draft" TO "anon";
GRANT ALL ON TABLE "public"."tag_content_draft" TO "authenticated";
GRANT ALL ON TABLE "public"."tag_content_draft" TO "service_role";



GRANT ALL ON SEQUENCE "public"."tag_content_draft_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."tag_content_draft_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."tag_content_draft_id_seq" TO "service_role";



GRANT ALL ON SEQUENCE "public"."tag_content_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."tag_content_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."tag_content_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."tag_master" TO "anon";
GRANT ALL ON TABLE "public"."tag_master" TO "authenticated";
GRANT ALL ON TABLE "public"."tag_master" TO "service_role";



GRANT ALL ON SEQUENCE "public"."tag_master_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."tag_master_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."tag_master_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."users_info_master" TO "anon";
GRANT ALL ON TABLE "public"."users_info_master" TO "authenticated";
GRANT ALL ON TABLE "public"."users_info_master" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
